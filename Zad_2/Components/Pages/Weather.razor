@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <h2>Warm days</h2>
        <p role="status">Number of warm days: @warmDays</p>
        <button class= " btn btn-primary "  @onclick="filtrateWeather">Only warm days</button>
        <button class= " btn btn-primary "  @onclick="restoreFiltratedWeather">Restore all days</button>
        <input class="form-control" @oninput="@Input" />
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            </tbody>
        </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? tempforecasts;
    int warmDays = 0;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
        tempforecasts = forecasts;
        foreach (var warm in forecasts)
        {
            if (warm.TemperatureC > 15)
            {
                warmDays++;
            }
        }

    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void filtrateWeather()
    {
        forecasts = forecasts.Where(x => x.TemperatureC > 15).ToArray();
    }

    private void restoreFiltratedWeather()
    {
        forecasts = tempforecasts;
    }

    private void Input(ChangeEventArgs arg)
    {
        if (arg.Value.ToString() == "")
        {
            restoreFiltratedWeather();
        }
        else
        {
            restoreFiltratedWeather();
            forecasts = forecasts.Where(x => x.Summary.Contains(arg.Value.ToString(), StringComparison.OrdinalIgnoreCase)).ToArray();
        }
    }
}
